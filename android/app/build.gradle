apply plugin: "com.android.application"

import com.android.build.OutputFile

apply from: "../../node_modules/react-native/react.gradle"

def enableSeparateBuildPerCPUArchitecture = false

def enableProguardInReleaseBuilds = false


android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }


    signingConfigs {
        release {
            keyAlias 'e通卡'
            keyPassword 'shopet.net'
            storeFile file('key_etongka_shopet.net_new')
            storePassword 'shopet.net'
        }
        debug {
            keyAlias 'e通卡'
            keyPassword 'shopet.net'
            storeFile file('key_etongka_shopet.net_new')
            storePassword 'shopet.net'
        }
    }
    defaultConfig {
        applicationId "com.citywithincity.ecard"
        minSdkVersion 16
        targetSdkVersion 22
        versionCode 2720
        versionName "2.7.2"
        multiDexEnabled true
        signingConfig signingConfigs.release
        ndk {
            abiFilters "armeabi-v7a"//, "x86"
        }

        packagingOptions {
            exclude "lib/arm64-v8a/libimagepipeline.so"
            exclude "lib/arm64-v8a/librealm-jni.so"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            // Zipalign优化
            zipAlignEnabled false
            // 移除无用的resource文件
            shrinkResources false

            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
        debug {
            minifyEnabled false

            // Zipalign优化
            zipAlignEnabled false
            // 移除无用的resource文件
            shrinkResources false

            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['jnilibs']
        }

    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
           /* def versionCodes = ["armeabi-v7a": 1]
            def abi = output.getFilter(OutputFile.ABI)
            output.versionCodeOverride =
                    versionCodes.get(abi) * 1048576 + defaultConfig.versionCode

            def outputFile = output.outputFile
            def date = new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
            def fileName = "ecard_${variant.productFlavors[0].name}-${defaultConfig.versionName}-${date}.apk"
            output.outputFile = new File(outputFile.parent, fileName)
            */
            def outputFile = output.outputFile
            def fileName
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                if (variant.buildType.name.equals('release')) {
                    fileName = "ecard_${variant.productFlavors[0].name}_${defaultConfig.versionName}_${releaseTime()}.apk"
                    output.outputFile = new File(outputFile.parent, fileName)
                }

            }
        }
    }


    repositories {
        flatDir {
            dirs 'libs'
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
    dexOptions {
        dexInProcess true
        preDexLibraries true
        javaMaxHeapSize "6g"//越大越好
    }


    productFlavors {
        alocal {

            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "test",
                                    PHP_SERVER : "http://110.80.22.108:8887",
                                    JAVA_SERVER:"http://192.168.1.236:8091",
                                    PICC: "http://120.55.115.222:8989",
                                    TSP:"true|110.80.22.108|8089"]
        }
  

        atest {
        
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "test",
                                    PHP_SERVER : "http://110.80.22.108:8887",
                                    JAVA_SERVER:"http://110.80.22.108:28080",
                                    PICC: "http://120.55.115.222:8989",
                                    TSP:"true|110.80.22.108|8089"]
        }




/*
              etongka {
                  manifestPlaceholders = [UMENG_CHANNEL_VALUE: "etongka",
                                          PHP_SERVER         : "http://218.5.80.17:8092",
                                          JAVA_SERVER        : "http://218.5.80.17:28095",
                                          PICC               : "http://www.xm95518.com:8989",
                                          TSP                : "false|218.5.80.17|2077"]
              }*/
    }
}

def releaseTime() {
    return new Date().format("yyyyMMddHH")
}

dependencies {

    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.mylhyl:acp:1.1.5'
    compile(name: 'dmlib-debug', ext: 'aar')
    compile(name: 'amap-debug', ext: 'aar')
    compile(name: 'react-debug', ext: 'aar')
    compile(name: 'bugly_crashreport_upgrade-1.3.4', ext: 'aar')
   // compile(name: 'ecard-release', ext: 'aar')

    compile 'com.facebook.react:react-native:+'
    compile 'com.android.support:multidex:1.0.0'
    //    compile 'com.squareup.okhttp3:okhttp:3.4.1'
    compile 'com.jzoom:jzoom-nfc:1.1.2'
    compile 'com.google.zxing:core:3.2.1'
   // compile 'com.alibaba:fastjson:1.2.21'
    // compile 'org.bouncycastle:bcprov-jdk15on:1.55'
    // compile files('libs/jjwt-0.7.0.jar')
    // compile files('libs/jackson-annotations-2.8.0.jar')
    // compile files('libs/jackson-core-2.8.2.jar')
    // compile files('libs/retrofit-2.1.0.jar')
    // compile files('libs/android-2.2.1-SNAPSHOT.jar')
    compile 'com.tencent.mm.opensdk:wechat-sdk-android-without-mta:+'
   // compile files('libs/bugly_crash_release.jar')
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
