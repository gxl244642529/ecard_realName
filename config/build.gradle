apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"]
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 *
 *
 * splits {
 abi {
 reset()
 enable enableSeparateBuildPerCPUArchitecture
 universalApk false  // If true, also generate a universal APK
 include "armeabi-v7a", "x86"
 }
 }
 *
 */

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false



android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    signingConfigs {
        release {
            keyAlias 'e通卡'
            keyPassword 'shopet.net'
            storeFile file('/SourceCode/projects/ecard/ecard/android/app/key_etongka_shopet.net_new')
            storePassword 'shopet.net'
        }
        debug {
            keyAlias 'e通卡'
            keyPassword 'shopet.net'
            storeFile file('/SourceCode/projects/ecard/ecard/android/app/key_etongka_shopet.net_new')
            storePassword 'shopet.net'
        }
    }
    defaultConfig {
        applicationId "com.citywithincity.ecard"
        minSdkVersion 16
        targetSdkVersion 22
        versionCode @{versionCode}
        versionName "@{versionName}"
        multiDexEnabled true
        signingConfig signingConfigs.release
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }

        packagingOptions {
            exclude "lib/arm64-v8a/libimagepipeline.so"
            exclude "lib/arm64-v8a/librealm-jni.so"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            // Zipalign优化
            zipAlignEnabled false
            // 移除无用的resource文件
            shrinkResources false

            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
        debug {
            minifyEnabled false

            // Zipalign优化
            zipAlignEnabled false
            // 移除无用的resource文件
            shrinkResources false

            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['jnilibs']
        }

    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode

                def outputFile = output.outputFile
                def date = new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
                def fileName = "ecard_${variant.productFlavors[0].name}-${defaultConfig.versionName}-${date}.apk"
                output.outputFile = new File(outputFile.parent, fileName)


            }
        }
    }

    /*
    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            def date = new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                //这里修改apk文件名
                def fileName = "ecard_${variant.productFlavors[0].name}-${defaultConfig.versionName}-${date}.apk"
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }
*/

    repositories {
        flatDir {
            dirs 'libs'
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
    dexOptions {
        dexInProcess true
        preDexLibraries true
        javaMaxHeapSize "6g"//越大越好
    }


    productFlavors {
      @{content}
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.mylhyl:acp:1.1.5'
    compile(name: 'dmlib-debug', ext: 'aar')
    compile(name: 'amap-debug', ext: 'aar')
    compile(name: 'react-debug', ext: 'aar')
    compile 'com.facebook.react:react-native:+'
    compile 'com.android.support:multidex:1.0.0'
    //    compile 'com.squareup.okhttp3:okhttp:3.4.1'
    compile 'com.google.zxing:core:3.2.1'
    compile 'com.alibaba:fastjson:1.2.21'
    compile 'org.bouncycastle:bcprov-jdk15on:1.55'
    compile files('libs/jjwt-0.7.0.jar')
    compile files('libs/jackson-annotations-2.8.0.jar')
    compile files('libs/jackson-core-2.8.2.jar')
    compile files('libs/retrofit-2.1.0.jar')
    compile files('libs/android-2.2.1-SNAPSHOT.jar')
    compile 'com.tencent.mm.opensdk:wechat-sdk-android-without-mta:+'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
